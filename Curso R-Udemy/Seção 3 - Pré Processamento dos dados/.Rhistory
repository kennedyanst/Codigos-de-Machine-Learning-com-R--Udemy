5+5
a <- 10
a
b
b
b = 10
b
10 -> c
c
"Oi, mundo" -> d
d
c <- a+b
"Oi, mundo" ->
a <- 5
b <- 10
c <- a+b
c <- a + b
"Oi, mundo" ->
a <- 5
a <- 5
c <- a + b
a
b
c
a <- "kennedy"
b <- "anderson"
c <- c(a,b)
c
?c
#?c
a <- c(2,5,6,9)
a[1]
summary(a)
#Para descobrir de que pacote é uma função, antes de
#installar vá: "rdocumentation.org". Pesquise a função:
#Ex: "str_c".
library(stringr)
#Para descobrir de que pacote é uma função, antes de
#installar vá: "rdocumentation.org". Pesquise a função:
#Ex: "str_c".
library("stringr")
#Para descobrir de que pacote é uma função, antes de
#installar vá: "rdocumentation.org". Pesquise a função:
#Ex: "str_c".
library('stringr')
#Para descobrir de que pacote é uma função, antes de
#installar vá: "rdocumentation.org". Pesquise a função:
#Ex: "str_c".
?str_c
install.packages("stringr")
#Para descobrir de que pacote é uma função, antes de
#installar vá: "rdocumentation.org". Pesquise a função:
#Ex: "str_c".
?str_c
library('stringr')
?str_c
a <- "Kennedy "
b <- "Anderson"
c <- str_c(a,b)
c
nome <- "Kennedy "
sobrenome <- "Anderson"
nome completo <- str_c(a,b)
nomecompleto <- str_c(a,b)
nomecompleto <- str_c(nome,sobrenome)
nomecompleto <- str_c(nome," ",sobrenome)
5 == 3 & 3 == 5
5 == 5 & 5<3
5 == 5 & 5>3
7 == 7 & 9 != 8
# OU
3 == 3
4 == 5
6 == 6 | 1 == 0
7 == 3 | 2 == 0
#NEGAÇÃO. Dizer o contrario do que seria o resultado.
!4>1
!5 == 5
!5 != 5
#TIPOS DE DADOS: Entender como a lingugem R organiza os dados.
salario <- 3219.90
horas <- 220
SH <- salario / horas
SHi = as.integer(salario/horas)
SHi * 5
SHr = round(salario/horas)
numeros = c(salario + horas)
numeros = c(salario, horas)
#ARMAZENAMENTOS DE CARACTERES
nome_1 = "Kennedy Anderson"
nome_2 = "Nascimento Santos"
nomes = c(nome_1, nome_2)
nomes[1]
nomes[2]
summary(Carga_Horaria)
#ARMAZENAMENTO DE FATORES
Carga_Horaria = (150, 150, 200, 220, 220)
summary(Carga_Horaria)
#ARMAZENAMENTO DE FATORES
Carga_Horaria = 150, 150, 200, 220, 220
summary(Carga_Horaria)
#ARMAZENAMENTO DE FATORES
Carga_Horaria <- 150, 150, 200, 220, 220
#ARMAZENAMENTO DE FATORES
Carga_Horaria <- c(150, 150, 200, 220, 220)
summary(Carga_Horaria)
factor(Carga_Horaria)
factor(Carga_Horaria)
#ARMAZENAMENTO DE FATORES
Carga_Horaria <- c(150, 150, 200, 220, 220)
summary(Carga_Horaria)
factor(Carga_Horaria)
as.factor(c(Carga_Horaria))
Carga_Horaria <- as.factor(c(Carga_Horaria))
summary(Carga_Horaria)
mode(Carga_Horaria)
class(Carga_Horaria)
#TIPOS DE DADOS: Entender como a lingugem R organiza os dados.
#ARMAZENAMENTOS NUMERICOS
salario <- 3219.90
horas <- 220
SH <- salario / horas
SHi = as.integer(salario/horas) #Para tranformar em numero inteiro, precisa usar a unção as.integer
SHi * 5
SHr = round(salario/horas) #Aredonda para mais o numero, não transformando em inteiro
numeros = c(salario, horas)
#ARMAZENAMENTOS DE CARACTERES
nome_1 = "Kennedy Anderson"
nome_2 = "Nascimento Santos"
nomes = c(nome_1, nome_2)
nomes[1]
nomes[2]
#ARMAZENAMENTO DE FATORES
Carga_Horaria <- c(150, 150, 200, 220, 220)
summary(Carga_Horaria)
Carga_Horaria <- as.factor(c(Carga_Horaria))
summary(Carga_Horaria)
mode(Carga_Horaria)
class(Carga_Horaria)
#ARMAZENAMENTO LÓGICO
L1 <- salario + horas
#ARMAZENAMENTO LÓGICO
L1 <- salario > horas
L1
L2
L2 <- salario < horas
L2
Logico <- TRUE
Logico1 <- c(1, FALSE, 3)
Logico1
#VETORES - Estrutura básica de dados.
is.vector(horas)
mode(horas)
is.vector(L1)
mode(L1)
is.vector(nomes)
mode(nomes)
is.string(df[Nome])
to.string(df[Nome])
getRversion()
library(caret)
library(caTools)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("lattice")
library(caret)
library(caret)
install.packages("ipred")
install.packages("recipes")
library(caret)
setwd("~/")
#DADOS DE TREINO = income, age, loan. PREVISÃO = default
base <- read.csv("credit_data.csv")
#DADOS DE TREINO = income, age, loan. PREVISÃO = default
base <- read.csv("credit_data copy.csv")
setwd("~/")
#DADOS DE TREINO = income, age, loan. PREVISÃO = default
base <- read.csv("credit_data copy.csv")
#DADOS DE TREINO = income, age, loan. PREVISÃO = default
base <- read.csv("credit_data.csv")
#DADOS DE TREINO = income, age, loan. PREVISÃO = default
base <- read.csv("credit_data copy.csv")
#DADOS DE TREINO = income, age, loan. PREVISÃO = default
base <- read.csv("credit_data copy.csv")
#DADOS DE TREINO = income, age, loan. PREVISÃO = default
base <- read.csv("credit_data.csv")
#DADOS DE TREINO = income, age, loan. PREVISÃO = default
base <- read.csv("credit_data.csv")
#DADOS DE TREINO = income, age, loan. PREVISÃO = default
base <- read.csv("credit_data.csv")
setwd("C:/Users/kenne/OneDrive/Área de Trabalho/Curso R-Udemy/Seção 3 - Pré Processamento dos dados")
#DADOS DE TREINO = income, age, loan. PREVISÃO = default
base <- read.csv("credit_data.csv")
#View(base)
base$clientid <- NULL
#View(base)
#summary(base)
#idade_invalida <- base[base$age < 0 & !is.na(base$age), ]
#View(idade_invalida)
# 1 apagar a coluna inteira
#base$age <- NULL
# 2 apagar somente os registros que estão com problemas
#base <- base[base$age > 0, ]
#View(base)
# 3 preencher os dados manualmente (MANEIRA MAIS CERTA DE TRATAR A BASE DE DADOS)
# 4 calcular a media da idade e preencher os dados faltantes
#mean(base$age, na.rm = TRUE)
#mean(base$age[base$age > 0], na.rm = TRUE)
base$age = ifelse(base$age < 0, 40.92, base$age)
#View(base$age)
#base[is.na(base$age), ]
#SE A IDADE FOR = A NULO, ENTÃO PREENCHA A MÉDIA. CASO CONTRARIO MANTENHA A IDADE PREENCHIDA
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
#View(base)
#base <- scale(base)
#View(base)
base[, 1:3] <- scale(base[, 1:3])
View(base)
install.packages("caTools")
library(caTools)
set.seed(1)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
